name: Rust Build and Conditional Release

on:
  push:
    branches-ignore:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    # Set up Rust environment
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    # Build the Rust project
    - name: Build
      run: cargo build --release

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: build
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    # Extract version from Cargo.toml, only for pushes to master
    - name: Extract version
      run: |
        echo "CARGO_VERSION=$(cargo read-manifest | ConvertFrom-Json | Select -ExpandProperty version)" >> $GITHUB_ENV

    # Set up Rust. This is necessary again because each job runs in a fresh environment
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    # Create a release using the version from Cargo.toml
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.CARGO_VERSION }}
        release_name: Release v${{ env.CARGO_VERSION }}
        draft: false
        prerelease: false

    # Upload the binary to the release
    - name: Upload Binary Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .\target\release\stratagem_engine.exe
        asset_name: stratagem_engine.exe
        asset_content_type: application/octet-stream

    # Upload the config file to the release
    - name: Upload Config File Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .\stratagems.toml
        asset_name: stratagems.toml
        asset_content_type: text/plain
